/**
 * 抽象策略角色：策略类，通常由一个接口或者抽象类实现 Comparator
 * 具体策略角色：包装了相关的算法和行为 Comparator接口的实现类
 * 环境角色：持有一个策略类的引用，最终给客户端调用 TreeSet/TreeMap
 *
 * 策略模式的实现：
 * - 将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换
 * - 策略模式使得算法可以在不影响到客户端的情况下发生变化。使用策略模式可以把行为和环境分割开来
 * - 环境类负责维持和查询行为类，各种算法则在具体策略中提供。由于算法和环境独立开来，算法的修改都不会影响环境和客户端
 *
 * 编写步骤：
 * - 对策略对象定义一个公共接口
 * - 编写策略类，该类实现了上面的公共接口
 * - 在使用策略对象的类中保存一个对策略对象的引用
 * - 在使用策略对象的类中，实现对策略对象的set和get方法（注入）或者使用构造方法完成赋值
 *
 * 缺点：
 * - 客户端必须知道所有的策略类，并自行决定使用哪一个策略类
 * - 造成很多的策略类
 *
 * 解决方案：
 * - 采用工厂方法
 *
 */
package com.design.pattern.strategy;